@page "/weather"

@inject NavigationManager NavigationManager
@inject Business.Interfaces.IAuthenticationService AuthenticationService;
@inject Business.Interfaces.IWorkorderService WorkorderService;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (workorders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in workorders)
            {
                <tr>
                    <td>@forecast.id</td>
                    <td>@forecast.Name</td>
                    <td>@forecast.ProjectName</td>
                    <td>@forecast.AmountUur</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //private WeatherForecast[]? forecasts;
    private Shared.Jsons.Workorder[]? workorders;

    protected override async Task OnInitializedAsync()
    {

        // workorders = WorkorderService.List(new Shared.RequestJsons.WorkorderListRequest()
        // {

        // });
        // // Simulate asynchronous loading to demonstrate a loading indicator
        // await Task.Delay(500);

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        // {
        //     Date = startDate.AddDays(index),
        //     TemperatureC = Random.Shared.Next(-20, 55),
        //     Summary = summaries[Random.Shared.Next(summaries.Length)]
        // }).ToArray();
    }

}
